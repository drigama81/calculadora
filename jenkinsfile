pipeline {
    agent any
            
    parameters {

        string(name: 'IMAGE_NAME', defaultValue:'java-calculator', description:'Name of the Image')

        string(name: 'JAR_NAME', defaultValue:'calculator', description:'Name of the .jar file')

        //string(name: 'CONTAINER_NAME', defaultValue: 'java-mvn', description:'Docker Container Name')

        //string(name: 'DOCKER_PORT', defaultValue: '3000', description:'Docker Container Host Port')
    }
        
    stages{
        

        //stage("build & SonarQube analysis") {
            //steps {
              //withSonarQubeEnv('sonarqube') {
                //sh 'mvn clean package sonar:sonar -Dsonar.host.url=http://sonarqube:9000'
            //}
        //}
        //}

        stage("Build Jar"){
            steps{
                sh 'javac *.java'
                sh 'jar cfe "$JAR_NAME".jar TotalCalculator *.class'

            }
        }
        
        stage ('Sonar Analise') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube';
                    withSonarQubeEnv ('sonarqube') {
                        sh "${scannerHome}/bin/sonar-scanner \
                        -D sonar.login=6486f3305b19d9bd5d71bbe81fcc21684f78bcac \
                        -D sonar.jenkins \
                        -Dsonar.sources=./ \
                        -D sonar.java.binaries=./ \
                        -D sonar.java.libraries=./*.jar \
                        -D sonar.host.url=http://sonarqube:9000"
        		    }
        	    }   
        	}
        }

         stage("store artifact on Nexus") {
            steps{
               withCredentials([usernameColonPassword(credentialsId: 'nexus-pw', variable: 'UserPw')]) {
                 sh 'curl -v -u "$UserPw" --upload-file /var/lib/jenkins/workspace/nexus-calculator/"$JAR_NAME".jar http://nexus:8081/repository/my-raw/'
            }
        }
    }

        stage('Create Docker Image') {
            steps {
                sh 'docker build -t "$IMAGE_NAME":v1.1 .'
            }
        }

        stage('Push Image to Nexus') {
            steps {
              withCredentials([usernamePassword(credentialsId: 'nexus-docker', passwordVariable: 'Pass', usernameVariable: 'User')]) {
                sh 'docker login -u "$User" -p "$Pass" localhost:8082'
                sh 'docker tag "$IMAGE_NAME":v1.1 localhost:8082/"$IMAGE_NAME":v1.1'
                sh 'docker push localhost:8082/"$IMAGE_NAME":v1.1'

            }
        }
    }
                stage('Clear WorkSpace') {
            steps {
                cleanWs()
            }
        }
    } 
}
